Why USE DOCKER?

Now, I'm going to show you a little flow diagram.
(image2)
This is a flow of probably a process you've gone through at least once in your life before.
(explain image 2)
Docker wants to make it really easy and really straightforward for you to install and run software on
any given computer, not just your computer, not just your personal laptop, your personal desktop,
but on Web servers as well, or any cloud based computing platform.

docker run -it redis

What IS DOCKER?
Image1
We're  going to try to answer the other big question here, which is what is Docker?
Well, this question is a lot more challenging to answer.
Any time you see someone refer to Docker in a blog post or an article or a forum or wherever it might
be, they're kind of making reference to an entire ecosystem of different projects, tools and pieces
of software.
(Image 5)
So if someone says, oh, yeah, I use Docker on my project, they might be referring to Docker client
or Docker server.
They might be referring to DockerHub or Docker Campose.

Again, these are all projects, tools, pieces of software that come together to form a platform or
ecosystem around creating and running something called containers.

(docker run -it redis)
(go to he shell)
When I ran that command, something called the Docker CLI, I reached out to something called the Docker Hub, and it downloaded a single file called An Image.
An image is a single file containing all the dependencies and all the configuration required to run
a very specific program.
(Image 04)
This is a single file that gets stored on your hard drive 
And at some point in time you can use this image to create something called a container.
A container is an instance of an image and you can kind of think of it as being like a running program.
We're going to go into detail behind to exactly say how a container works.
But right now,  we really need to understand that a container is a program with its own isolate set of hardware resources.
So it kind of has its own little set space of memory, has its own little space of networking technology and its own little space of hard drive space as well.

So if installaled Docker on your machine, form the shell we can run the command 
	Docker version
	
Now we are doign our meaning command using the docker CLI

USING the DOCKER CLIENT

	docker run hello-world
	
the docker CLI is in charge of taking commands from you, kind of doing a little bit of processing
on them and then communicating the commands over to something called the Docker server.
image 8
And it's that Docker server that is really in charge of the heavy lifting when we ran the command docker run Hello World, that meant that we wanted to start up a new container using the image with the name of Hello World.
(Flow image 8)
The first thing that the Docker server did was check to see if it already had a local copy, a
copy on your personal machine of the Hello World Image or that hello world file.
So the Docker server looked into something called the image cache.
So because the image cache was empty, the Docker server decided to reach out to a free service called Docker HUb.
The Docker hub is a repository of free public images so you can freely download and run on your personal computer.
So Docker Server reached out to Docker Hub and said, Hey, I'm looking for an image called Hello World.
Do you have one?
Of course the Docker hub does
So Docker Server downloaded this hello world file and stored it on your personal computer in this image cache where it can now be reran at some point in the future very quickly without having to download it from the Docker hub.
I've got this image and now it's time to use it to create an instance of a container.
An instant container is an instance of an image. Its sole purpose is to run one very specific program.

So the Docker server then essentially took that single file, loaded it up into memory, created a container

 But Really...What's a Container?
 
 image(09)
 OK, so this is a quick overview of the operating system on your computer, most operating systems have
something called a kernel.
This kernel is a running software process that governs access between all the programs that are running
on your computer and all the physical hardware that is connected to your computer as well.

So up here at the top of this diagram, we have different programs that your computer is running, such
as Chrome or terminal, Spotify or Noejs.


So the kernel is kind of this intermediate layer that governs access between these programs and
your actual hard disk.
The other important thing to understand here is that these running programs interact with the kernel
through things called system calls.

These are essentially like function invocations.
The kernel exposes different endpoints to say, hey, if you want to write a file to the hard drive call this endpoint or this function right here.
(Image 10)
Now, thinking about this entire system right here, I want to pose a kind of hypothetical situation
to you call this endpoint or this function right here.

I want you to imagine that we're in a crazy world where Chrome, in order to work properly, has to
have Python version installed and node JS has to have version three installed.
However, on our hard disk, we only have access to Python version two and for whatever crazy reason,
we are not allowed to have two identical installations of Python at the same time.
Again, this is a completely make believe situation. I just want you to kind of consider this for a second, because this is kind of leading into what a
container is.

So how could we solve this issue?
image(11)
Well, one way to do it would be used to make use of a operating system feature known as name spacing.
with name spacing we can look at all of the different hardware resources connected to our computer and we can essentially
segment out portions of those resources, so we could create a segment of our hard disk specifically dedicated
to housing Python version two and we could make a second segment specifically dedicated to a housing Python Version three.
(image 12)
Any time that a process of them issues a system call to read information off the hard drive, the kernel
will look at that incoming system call and try to figure out which process it is coming from.
So the kernel could say, OK, if Chrome is trying to read some information off the hard drive, I'm
going to direct that call over to this little segment of the hard disk over here, the segment that
has Python version two.
And so by making use of this kind of namespace or segmenting feature, we can have the ability to make
sure that Chrome and Node are able to work on the same machine.

Now, again, in reality, neither of these actually need an installation of Python.

(image13)
Now, name spacing is not only used for hardware, it can be also used for software elements as well.
So, for example, we can namespace a process to restrict the area of a hard drive that is available
or the network devices that are available, or the ability to talk to other processes or the ability
to see other processes.These are all things that we can use namespace for to essentially limit the resources.

Very closely related to this idea of name spacing is another feature called Control Groups.
A control group can be used to limit the amount of resources that a particular process can use.

So namespacing is for saying, hey, this area of the hard drive is for this process.

A control group can be used to limit the amount of resources that a particular process can use.
A control group can be used to limit the amount of memory that a process can use, the amount of CPU,
the amount of hard drive, input or output, and the amount of network bandwith as well.
So these two features put together can be used to really kind of isolate a single process and limit
the amount of resources it can talk to and the amount of bandwidth essentially that it can make use
of.
(Image 14)
Now, as you might imagine, this entire kind of little section right here, this entire vertical of
a running process, plus this little segment of a resource that I can talk to is what we refer to as
a container.
And so when people say, oh, yeah, I have a docker container, you really should not think of these

as being like a physical construct that exists inside of your computer.
Instead, a container is really a process or a set of processes that have a grouping of resources specifically
assigned to it.

(image15)
And so this is a diagram that we're going to be looking at quite a bit.
Any time that we think about a container, we've got some running process that sends a system call to
a kernel.
The kernel is going to look at that incoming system call and direct it to a very specific portion of
the hard drive, the RAM CPU or whatever else it might need.
And a portion of each of these resources is made available to that singular process.

, OK, well, I get what a container is.
(image 05)
But with that in mind, what is the real relation between one of those containers or that kind of single
singular process and grouping of resources to an image
How is that single file eventually create this container?
That's a good question. One more quick diagram.

(image 16)
And each time that we talk about an image, we're really talking about a file system snapshot.
So this is essentially kind of like a copy paste of a very specific set of directories or files.
And so we might have an image that contains just chrome and python.
An image will also contain a specific Start-Up command.

So here's what happens behind the scenes when we take an image and turn it into a container.
First of all, the kernel is going to isolate a little section of the hard drive and make it available
to just this container.
And so now inside of this very specific grouping of resources, we've got a little section of the hard
drive that has just Chrome and Python installed and essentially nothing else.

The startup command is then executed, which we can kind of imagine, this case is like startup chrome,
just chrome for me. And so Chrome is invoked.
We create a new instance of that process and that creative process is then isolated to this set of resources
inside the container.

So that's pretty much it.

That is the relationship between a container and an image, and it's how an image is eventually taken
and turn into a running container.

Now, one thing that I want to mention very quickly, we spoke a little bit
about the separation or the kind of the isolation of these resources through a technique called namespacing.

Now, this feature of namespacing and controlgroups is not included by default with all operating
systems, these features of name spacing and control groups are specific to the Linux operating system.

So namespace control groups belong to Linux, not to Windows, not to Mac OS.

So that might make you kind of question or wonder, how are you running Docker right now?
You know, we are running a Doctor Klein and we are running docker containers on a Mac OS or Windows
operating system.
Well, here's what's happening behind the scenes.
(image15)
When you install Docker for Windows or Docker for Mac 
 so long as Docker up here is running, you technically have a Linux virtual machine running on your
computer.
And if you run 
 	Docker version
command again and look at your server, you'll notice that there's
actually an OS entry on here and you'll notice that it probably doesn't have your operating system listed.
